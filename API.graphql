# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthResponse {
  token: String!
  currentUser: CurrentUser!
}

type Backup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  state: BackupState!
  client: Client!
}

enum BackupState {
  STREAMING
  FINISHED
}

type Client {
  id: ID!
  clientToken: String!
  path: String!
  backups: [Backup!]!
}

type ClientEvent {
  type: ClientEventType!
}

enum ClientEventType {
  BACKUP
}

type Configuration {
  id: ID!
}

input CreateClientInput {
  path: String!
}

input CreateServiceInput {
  name: String!
}

input CreateUtilityInput {
  name: String!
}

type CurrentUser {
  id: ID!
  username: String!
  email: String!
  roles: [UserRole!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input LoginInput {
  username: String!
  password: String!
}

type Mutation {
  login(input: LoginInput!): AuthResponse!
  register(input: UserInput!): RegisterResponse!
  resetPasswordReset(input: RequestPasswordResetInput!): Boolean!
  createBackup(clientToken: String!): Backup!
  pushBackupChunk(chunk: String!, backupId: ID!): Boolean!
  finishBackup(backupId: ID!): Backup!
  createClient(input: CreateClientInput!, serviceId: ID!): Service!
  emitClientEvent(clientId: ID!): Boolean!
  initialConfiguration(user: UserInput!): Configuration!
  createService(input: CreateServiceInput!): ServiceOutput!
  createUtility(input: CreateUtilityInput!): Utility!
}

type Query {
  currentUser: CurrentUser
  client(clientId: ID!): Client!
  hasSetup: Boolean!
  services: [Service!]!
  service(serviceId: ID!): Service!
  users: [User!]!
  user(userId: String!): User!
  utilities: [Utility!]!
  helloWorld: String!
}

type RegisterResponse {
  success: Boolean!
  token: String!
  currentUser: CurrentUser!
}

input RequestPasswordResetInput {
  email: String!
}

input ResetPasswordInput {
  token: String!
  password: String!
}

type Service {
  id: ID!
  name: String!
  clients: [Client]!
}

type ServiceOutput {
  services: [Service!]!
  service: Service!
}

type Subscription {
  clientEvents(clientToken: String!): ClientEvent!
}

type User {
  id: ID!
  username: String!
}

input UserInput {
  username: String!
  email: String!
  password: String!
}

enum UserRole {
  GUEST
  USER
  ADMIN
}

type Utility {
  id: ID!
  name: String!
}
